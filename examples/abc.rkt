#lang typed/racket/no-check
(define-syntax ML246 (syntax-rules () ((_ e1 e2 T1 T2) (begin e1 e2))))
(define-syntax ML245 (syntax-rules () ((_ x e1 e2 T1 T2) (let: ((x : T1 e1)) e2))))
(: ML241 (Integer Integer -> Integer))
(define ML241 (λ (x y) (* x y)))
(: ML240 (Integer Integer -> Integer))
(define ML240 (λ (x y) (- x y)))
(: ML239 (Integer Integer -> Integer))
(define ML239 (λ (x y) (+ x y)))
(: ML238 (Integer -> Integer))
(define ML238 (λ (x) (abs x)))
(: Sets468 (All (T) ((Setof T) -> Integer)))
(define Sets468 (λ (s) (set-count s)))
(define-syntax Sets465 (syntax-rules () ((_ x xs T) (cons x xs))))
(define-syntax Sets464 (syntax-rules () ((_ x T) (list x))))
(: ML242 (Integer Integer -> Boolean))
(define ML242 (λ (x y) (< x y)))
(: ML243 (All (T) (T -> Void)))
(define ML243 (λ (x) (displayln x)))
(: Sets467 (All (T) ((Setof T) (Setof T) -> (Setof T))))
(define Sets467 (λ (s1 s2) (set-intersect s1 s2)))
(: Sets466 (All (T) ((Setof T) (Setof T) -> (Setof T))))
(define Sets466 (λ (s1 s2) (set-union s1 s2)))
(define-syntax Sets463 (syntax-rules () ((_ x xs T) (list->set (cons x xs)))))
(define-syntax Sets462 (syntax-rules () ((_ x T) (set x))))
(define-syntax ML247 (syntax-rules () ((_ x T) x)))
(define-syntax ML244 (syntax-rules () ((_ test e1 e2 T) (if test e1 e2))))
(begin (ML245 A (Sets463 1 (Sets465 2 (Sets464 3 Integer) Integer) Integer) (ML245 B (Sets463 2 (Sets465 3 (Sets464 4 Integer) Integer) Integer) (ML245 C (Sets463 3 (Sets465 4 (Sets464 5 Integer) Integer) Integer) (ML246 (ML243 (Sets468 (Sets467 A C))) (ML243 (Sets466 A (Sets467 B C))) Void Void) (Setof Integer) Void) (Setof Integer) Void) (Setof Integer) Void))
